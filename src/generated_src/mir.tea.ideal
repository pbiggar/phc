{-
 - phc -- the open source PHP compiler
 - See doc/license/README.license for licensing information
 -
 - Definition of the MIR
 -
 - This is being left in as a reference until we can incrementally move the
 - hir.tea file to match the definition.
 -
 -}

{-
	Configuration
-}

output_dir "src/generated";
prefix "MIR";
external class "Object";
external class "IR::Node";
external class "IR::PHP_script";
use list "List";
use string "String";
use namespace "MIR";
no source_rep;

{-
   Top-level structure	
-}

PHP_script ::= Statement* ;

Statement ::=
     Class_def | Interface_def | Method
	| Return | Static_declaration | Global
	| Try | Throw
	| Label | Goto | Branch

	| Assign_var | Assign_var_var | Assign_array | Push_array
	;

{-
	Class and method definitions
-}

Class_def ::= 
   Class_mod CLASS_NAME extends:CLASS_NAME? implements:INTERFACE_NAME* Member* ;
Class_mod ::= "abstract"? "final"? ;

Interface_def ::= INTERFACE_NAME extends:INTERFACE_NAME* Member* ;

Member ::= Method | Attribute ;

Method ::= Signature Statement*? ;
Signature ::= Method_mod is_ref:"&"? METHOD_NAME Formal_parameter* ;
Method_mod ::= "public"? "protected"? "private"? "static"? "abstract"? "final"? ;
Formal_parameter ::= Type is_ref:"&"? VARIABLE_NAME Static_value? ;
Type ::= CLASS_NAME? ;

Attribute ::= Attr_mod VARIABLE_NAME Static_value? ;
Attr_mod ::= "public"? "protected"? "private"? "static"? "const"?  ;

{-
   Statements
-}

Return ::= VARIABLE_NAME? ;


Static_declaration ::= VARIABLE_NAME Static_value? ;
Global ::= Variable_name ;
Variable_name ::= VARIABLE_NAME | Variable_variable;

Try ::= Statement* catches:Catch* ;
Catch ::= CLASS_NAME VARIABLE_NAME Statement* ;
Throw ::= VARIABLE_NAME ;

Assign_var     ::= lhs:VARIABLE_NAME is_ref:"&"? ignore_errors:"@"? rhs:Expr ;
Assign_array   ::= lhs:VARIABLE_NAME index:VARIABLE_NAME is_ref:"&"? rhs:VARIABLE_NAME ;
Assign_var_var ::= lhs:VARIABLE_NAME                     is_ref:"&"? rhs:VARIABLE_NAME ;
Push_array     ::= lhs:VARIABLE_NAME                     is_ref:"&"? rhs:VARIABLE_NAME ; 

{-
   MIR constructs (without a PHP equivalent)
-}

Branch ::= VARIABLE_NAME iftrue:LABEL_NAME iffalse:LABEL_NAME;
Goto ::= LABEL_NAME ;
Label ::= LABEL_NAME ;

{-
   Expressions
-}

Expr ::=
	  Cast | Unary_op | Bin_op 
	| Constant | Instanceof
	| Method_invocation | new 
	| Literal
	| Variable_name | Index_array 
	;

Literal ::= INT<long> | REAL<double> | STRING<String*> | BOOL<bool> | NIL<> ;
   
Index_array       ::= VARIABLE_NAME index:VARIABLE_NAME ;
Variable_variable ::= VARIABLE_NAME ; 

Cast     ::= CAST VARIABLE_NAME ;
Unary_op ::= OP VARIABLE_NAME ;
Bin_op   ::= left:VARIABLE_NAME OP right:VARIABLE_NAME ; 

Constant ::= CLASS_NAME? CONSTANT_NAME ;

Instanceof ::= VARIABLE_NAME class_name ;

Target ::= VARIABLE_NAME | CLASS_NAME ;

Method_invocation ::= Target? Method_name Actual_parameter* ;
Method_name ::= METHOD_NAME | VARIABLE_NAME ;

Actual_parameter ::= is_ref:"&"? Target? VARIABLE_NAME array_indices:VARIABLE_NAME?* ;

New ::= Class_name Actual_parameter* ;
Class_name ::= CLASS_NAME | VARIABLE_NAME ;

Static_value ::= Literal | Static_array | Constant ;
 
Static_array      ::= static_array_elem* ;
Static_array_elem ::= Static_array_key? is_ref:"&"? val:Static_value ;
Static_array_key  ::= Literal | Constant ; 

