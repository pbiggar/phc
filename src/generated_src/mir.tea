{-
 - phc -- the open source PHP compiler
 - See doc/license/README.license for licensing information
 -
 - Definition of the MIR.
 -
 - The MIR is slightly lower than the HIR, and includes concepts
 - which we use for code generation, but are not PHP, such as GOTOs,
 - Labels, and features such as exception targets and break targets.
 -
 -}

{-
	Configuration
-}

output_dir "src/generated";
prefix "MIR";
external class "Object";
external class "IR::Node";
external class "IR::PHP_script";
use list "List";
use string "String";
use namespace "MIR";
no source_rep;

{-
   Top-level structure	
-}

PHP_script ::= Statement* ;

Statement ::=
     Class_def | Interface_def | Method
	| Return | Static_declaration | Global
	| Try | Throw
	| Label | Goto | Branch
	| Foreach_next | Foreach_reset | Foreach_end
	| Assign_var | Assign_var_var | Assign_array | Push_array | Eval_expr | Pre_op
	| Foreign_statement
	;

{-
	Class and method definitions
-}

Class_def ::= 
   Class_mod CLASS_NAME extends:CLASS_NAME? implements:INTERFACE_NAME* Member* ;
Class_mod ::= "abstract"? "final"? ;

Interface_def ::= INTERFACE_NAME extends:INTERFACE_NAME* Member* ;

Member ::= Method | Attribute ;

Method ::= Signature Statement*? ;
Signature ::= Method_mod is_ref:"&"? METHOD_NAME Formal_parameter* ;
Method_mod ::= "public"? "protected"? "private"? "static"? "abstract"? "final"? ;
Formal_parameter ::= Type is_ref:"&"? var:Name_with_default ;
Type ::= CLASS_NAME? ;

Attribute ::= Attr_mod var:Name_with_default ;
Attr_mod ::= "public"? "protected"? "private"? "static"? "const"?  ;

Name_with_default ::= VARIABLE_NAME Expr? ;

{-
   Statements
-}

-- These need to be Expr because we don't know if they should be return by reference or by copy.
Return ::= Expr ;

Static_declaration ::= var:Name_with_default ;
Global ::= Variable_name ;
-- Variable_name ::= VARIABLE_NAME | Variable_variable;

Try ::= Statement* catches:Catch* ;
Catch ::= CLASS_NAME VARIABLE_NAME Statement* ;
Throw ::= Expr ;
-- Throw ::= VARIABLE_NAME ;

Assign_var     ::= Target? lhs:VARIABLE_NAME								is_ref:"&"? rhs:Expr ;
Assign_array   ::= Target? lhs:VARIABLE_NAME index:VARIABLE_NAME	is_ref:"&"? rhs:VARIABLE_NAME ;
Assign_var_var ::= Target? lhs:VARIABLE_NAME						      is_ref:"&"? rhs:VARIABLE_NAME ;
Push_array     ::= Target? lhs:VARIABLE_NAME								is_ref:"&"? rhs:VARIABLE_NAME ;

-- Some exprs can be invoked with and without a lhs
Eval_expr ::= Expr ;

{-
   Expressions
-}

Expr ::=
	  Cast | Unary_op | Bin_op 
	| Constant | Instanceof
	| Variable
	| Method_invocation | New
	| Literal 
	| Array -- can probably be removed
-- | Variable_name | Index_array
	| Foreach_has_key | Foreach_get_key | Foreach_get_val
	| Foreign_expr
	;

Literal ::= INT<long> | REAL<double> | STRING<String*> | BOOL<bool> | NIL<> ;
   
-- Index_array       ::= VARIABLE_NAME index:VARIABLE_NAME ;
-- Variable_variable ::= VARIABLE_NAME ; 

Cast     ::= CAST VARIABLE_NAME ;
Unary_op ::= OP VARIABLE_NAME ;
Bin_op   ::= left:VARIABLE_NAME OP right:VARIABLE_NAME ; 

Constant ::= CLASS_NAME? CONSTANT_NAME ;

Instanceof ::= VARIABLE_NAME Class_name ;

Variable ::= Target? Variable_name array_indices:VARIABLE_NAME* ;
Variable_name ::= VARIABLE_NAME | Reflection ;
Reflection ::= VARIABLE_NAME ;

Target ::= Expr | CLASS_NAME ;
-- Target ::= VARIABLE_NAME | CLASS_NAME ;

-- Pre_op cannot be converted to a VARIABLE_NAME due to, for example, ++$x->z.
Pre_op ::= OP Variable ;

Array ::= Array_elem* ;
Array_elem ::= key:Expr? is_ref:"&"? val:Expr ;

Method_invocation ::= Target? Method_name Actual_parameter* ;
Method_name ::= METHOD_NAME | Reflection ;

Actual_parameter ::= is_ref:"&"? Target? Variable_name array_indices:VARIABLE_NAME* ;

New ::= Class_name Actual_parameter* ;
Class_name ::= CLASS_NAME | Reflection ;

-- Static_value ::= Literal | Static_array | Constant ;
 
-- Static_array      ::= Static_array_elem* ;
-- Static_array_elem ::= Static_array_key? is_ref:"&"? val:Static_value ;
-- Static_array_key  ::= Literal | Constant ; 

{-
   MIR constructs (without a PHP equivalent)
-}

Branch ::= VARIABLE_NAME iftrue:LABEL_NAME iffalse:LABEL_NAME;
Goto ::= LABEL_NAME ;
Label ::= LABEL_NAME ;

Foreach_reset ::= array:VARIABLE_NAME iter:HT_ITERATOR<long> ;
Foreach_next ::= array:VARIABLE_NAME iter:HT_ITERATOR<long> ;
Foreach_end ::= array:VARIABLE_NAME iter:HT_ITERATOR<long> ;
Foreach_has_key ::= array:VARIABLE_NAME iter:HT_ITERATOR<long> ;
Foreach_get_key ::= array:VARIABLE_NAME iter:HT_ITERATOR<long> ;
Foreach_get_val ::= array:VARIABLE_NAME key:VARIABLE_NAME iter:HT_ITERATOR<long> ;

{-
 - Additional structure 
 -}

Identifier ::=
	  INTERFACE_NAME | CLASS_NAME | METHOD_NAME | VARIABLE_NAME 
	  | CAST | OP | CONSTANT_NAME | LABEL_NAME
	;  

Foreign ::= Foreign_statement | Foreign_expr ;
Foreign_statement ::= ;
Foreign_expr ::= ;


{-
 - Extra attributes and methods (mixin code)
 -}

#include <iostream>
#include <sstream>
#include <iomanip>
#include "lib/error.h"
#include "lib/Object.h"
#include "lib/List.h"
#include "lib/String.h"
#include "lib/Boolean.h"
#include "lib/Integer.h"
#include "lib/AttrMap.h"
#include "process_ir/IR.h"

class Node : IR::Node
{
public:
	void clone_mixin_from(Node* in)
	{
		attrs->clone_all_from (in->attrs);
	}

	void assert_mixin_valid()
	{
		assert(attrs != NULL);

		AttrMap::const_iterator i;
		for(i = attrs->begin(); i != attrs->end(); i++)
		{
			if ((*i).first != "phc.line_number"
				&& (*i).first != "phc.filename")
			{
				assert((*i).second != NULL);
			}
		}
	}

	bool is_mixin_equal(Node* in)
	{
		// Compare line number and filename
		// (We can't compare the entire attrs map because Object cannot
		// necessarily be compared for equality)

		if(get_line_number() != in->get_line_number())
			return false;

		if(get_filename() == NULL)
		{
			if(in->get_filename() != NULL)
				return false;
		}
		else
		{
			if(*get_filename() != *in->get_filename())
				return false;
		}

		return true;
	}

};

class PHP_script : IR::PHP_script {};

class Signature 
{
public:
	Signature(const char* name) 
	{
		this->method_mod = Method_mod::new_PUBLIC();
		this->is_ref = false;
		this->method_name = new METHOD_NAME(new String(name));
		this->formal_parameters = new List<Formal_parameter*>;
	}
};

class Method_mod 
{
public:
	Method_mod()
	{
		is_public = false;
		is_protected = false;
		is_private = false;
		is_static = false;
		is_abstract = false;
		is_final = false;
	}

	Method_mod(Method_mod* a, Method_mod* b) 
	{
		this->is_public 		= a->is_public		|| b->is_public;
		this->is_protected	= a->is_protected	|| b->is_protected;
		this->is_private		= a->is_private	|| b->is_private;
		this->is_static		= a->is_static		|| b->is_static;
		this->is_abstract		= a->is_abstract	|| b->is_abstract;
		this->is_final			= a->is_final		|| b->is_final;
	}

	static Method_mod* new_PUBLIC() 
	{
		return new Method_mod(true, false, false, false, false, false);		
	}

	static Method_mod* new_PROTECTED() 
	{ 
		return new Method_mod(false, true, false, false, false, false);		
	}

	static Method_mod* new_PRIVATE() 
	{ 
		return new Method_mod(false, false, true, false, false, false);		
	}

	static Method_mod* new_STATIC() 
	{ 
		return new Method_mod(false, false, false, true, false, false);		
	}

	static Method_mod* new_ABSTRACT() 
	{ 
		return new Method_mod(false, false, false, false, true, false);		
	}

	static Method_mod* new_FINAL() 
	{ 
		return new Method_mod(false, false, false, false, false, true);		
	}
};

class Class_def
{
public:
	Class_def(Class_mod* mod) 
	{
		this->class_mod = mod;
		this->class_name = NULL;
		this->extends = NULL;
		this->implements = new List<INTERFACE_NAME*>;
		this->members = new List<Member*>;
	}

	Class_def(const char* name)
	{
		this->class_mod = new Class_mod(false, false);
		this->class_name = new CLASS_NAME(new String(name));
		this->extends = NULL;
		this->implements = new List<INTERFACE_NAME*>;
		this->members = new List<Member*>;
	}

	void add_member(Member* member) 
	{
		this->members->push_back(member);
	}

	// Returns NULL if the method could not be found
	Method* get_method(const char* name)
	{
		List<Member*>::const_iterator i;
		for(i = members->begin(); i != members->end(); i++)
		{
			Method* method = dynamic_cast<Method*>(*i);
			if(method && *method->signature->method_name->value == name)
				return method;
		}

		return NULL;
	}
};

class Assign_var
{
public:
	Assign_var (VARIABLE_NAME* lhs, Expr* rhs)
	{
		this->target = NULL;
		this->lhs = lhs;
		this->is_ref = false;
		this->rhs = rhs;
	}

	Assign_var (VARIABLE_NAME* lhs, bool is_ref, Expr* rhs)
	{
		this->target = NULL;
		this->lhs = lhs;
		this->is_ref = is_ref;
		this->rhs = rhs;
	}
};

class Variable
{
public:
	Variable(Variable_name* name) 
	{
		this->target = NULL;
		this->variable_name = name;
		this->array_indices = new List<VARIABLE_NAME*>;
	}
};

class Method_invocation
{
public:
	Method_invocation(const char* name, Actual_parameter* arg) 
	{ 
		this->target = NULL;
		this->method_name = new METHOD_NAME(new String(name));
		this->actual_parameters = new List<Actual_parameter*> (arg);
	}

	Method_invocation(METHOD_NAME* name, Actual_parameter* arg) 
	{ 
		this->target = NULL;
		this->method_name = name; 
		this->actual_parameters = new List<Actual_parameter*> (arg);
	}
};

class Formal_parameter
{
public:
	Formal_parameter(Type* type, VARIABLE_NAME* name) 
	{
		this->type = type;
		this->is_ref = false;
		this->var = new Name_with_default(name, NULL);
	}

	Formal_parameter(Type* type, bool is_ref, VARIABLE_NAME* name) 
	{ 
		this->type = type;
		this->is_ref = is_ref;
		this->var = new Name_with_default(name, NULL);
	}
};

class Attr_mod
{
public:
	Attr_mod()
	{
		is_public = false;
		is_protected = false;
		is_private = false;
		is_static = false;
		is_const = false;
	}

	Attr_mod(Method_mod* mm) 
	{
		if(mm->is_final)
			phc_error("The final modifier is only allowed for methods", mm->get_filename(), mm->get_line_number());

		this->is_public = mm->is_public;
		this->is_protected = mm->is_protected;
		this->is_private = mm->is_private;
		this->is_static = mm->is_static;
		this->is_const = false;
	}

	static Attr_mod* new_PUBLIC() 
	{
		return new Attr_mod(true, false, false, false, false);
	}

	static Attr_mod* new_PROTECTED() 
	{ 
		return new Attr_mod(false, true, false, false, false);
	}

	static Attr_mod* new_PRIVATE() 
	{
		return new Attr_mod(false, false, true, false, false);
	}

	static Attr_mod* new_STATIC() 
	{
		return new Attr_mod(false, false, false, true, false);
	}
	
	static Attr_mod* new_CONST() 
	{
		return new Attr_mod(false, false, false, false, true);
	}
};

class Bin_op
{
public:
	Bin_op(VARIABLE_NAME* left, VARIABLE_NAME* right, const char* op) 
	{
		this->left = left;
		this->op = new OP(new String(op));
		this->right = right;
	}
};

class Pre_op
{
public:
	Pre_op(Variable* var, const char* op) 
	{
		this->variable = var;
		this->op = new OP(new String(op));
	}
};

class Unary_op
{
public:
	Unary_op(VARIABLE_NAME* variable_name, const char* op) 
	{
		this->variable_name = variable_name;
		this->op = new OP(new String(op));
	}
};

class Cast
{
public:
	Cast(const char* type, VARIABLE_NAME* variable_name) 
	{
		this->cast = new CAST(new String(type));
		this->variable_name = variable_name;
	}
};

class HT_ITERATOR
{
public:
	HT_ITERATOR (long identifier)
	{
		value = identifier;
		std::ostringstream os;
		os << "ht_iterator_" << value;
	}

	String* get_value_as_string ()
	{
		std::ostringstream os;
		os << "ht_iterator_" << value;
		return new String(os.str());
	}
};


class Identifier
{
public:
	virtual String* get_value_as_string() = 0;
};

class Literal
{
public:
	virtual String* get_value_as_string() = 0;
};

class INT
{
private:

	// Constructors can't call virtual functions, so we create a non-virtual to
	// do the work. This is then called by the virtual function, and is also
	// safely called from the constructor.
	String* _get_value_as_string()
	{
		std::ostringstream os;
		os << value;
		return new String(os.str());
	}

public:
	virtual String* get_value_as_string()
	{
		return _get_value_as_string ();
	}

	bool match_value (INT* that)
	{
		return (that->value == value);
	}
};

class REAL
{
private:

	// See comment in INT::_get_value_as_string ()
	String* _get_value_as_string()
	{
		std::ostringstream os;
		// setprecision(20) outputs as many digits as required, with
		// a maximum of 20
		os << setprecision(20) << value;
		// unfortunately, that means that if no digits are required at
		// all (after the decimal point), the decimal point is left out
		// completely; setting the "showpoint" flag fixes this, but then
		// the STL _always_ shows all 20 digits, which is not what we 
		// want either. Hence, we insert the ".0" manually if necessary:
		string str = os.str();
		if(str.find('.') >= str.size())
			str.append(".0");

		return new String(str);
	}

public:
	virtual String* get_value_as_string()
	{
		return _get_value_as_string ();
	}

public:

	bool match_value (REAL* that)
	{
		return (that->value == value);
	}
};

class BOOL
{
private:
	// See comment in INT::_get_value_as_string ()
	String* _get_value_as_string()
	{
		if(value)
			return new String("True");
		else
			return new String("False");
	}

public:
	virtual String* get_value_as_string()
	{
		return _get_value_as_string ();
	}

	bool match_value (BOOL* that)
	{
		return (that->value == value);
	}
};

class STRING
{
public:
	virtual String* get_value_as_string()
	{
		return value;
	}

	bool is_value_valid()
	{
		return value != NULL;
	}

	String* clone_value()
	{
		return value->clone();
	}

	bool match_value (STRING* that)
	{
		return (*that->value == *value);
	}
};

class NIL
{
public:
	virtual String* get_value_as_string()
	{
		return new String("NULL");
	}
};

class Foreign
{
public:
	Foreign (IR::Node* foreign)
	{
		this->foreign = foreign;
	}

	IR::Node* foreign;
};

class Foreign_statement
{
	// TODO: modify maketea to allow contructors with :
public:
	Foreign_statement (IR::Node* foreign)
	{
		this->foreign = foreign;
	}
};

class Foreign_expr
{
public:
	Foreign_expr (IR::Node* foreign)
	{
		this->foreign = foreign;
	}
};
