#!/usr/bin/php -q

<?php

  $nc_array = array();
  $sc_array = array();

  $max_guard_size = 0;
 
  $args = $_SERVER['argv'];
  $filename = $args['1'];
  $nc_file = $args['2'];
  $sc_file = $args['3'];
  $freq_file = $args['4'];

  $lines = file($filename);
  foreach($lines as $line_num => $line){
	$begin=substr($line, 1, 6);
	if($begin == "**NC**")
	  process_cond($line, "nc");
	if($begin == "**SC**")
	  process_cond($line, "sc");
	
  }




  $avg_nc = array_map("compute_average", $nc_array);
  $nc_std_dev = compute_std_dev($nc_array, $avg_nc);
  $nc_output = create_output($avg_nc, $nc_std_dev);
  $fh = fopen($nc_file, 'w');
  fwrite($fh, $nc_output);
  fclose($fh);

  $avg_sc = array_map("compute_average", $sc_array);
  $sc_std_dev = compute_std_dev($sc_array, $avg_sc);
  $sc_output = create_output($avg_sc, $sc_std_dev);
  $fh = fopen($sc_file, 'w');
  fwrite($fh, $sc_output);
  fclose($fh);

  $frequency = compute_frequency($nc_array);
  $freq_output = get_freq_output($frequency);
  $fh = fopen($freq_file, 'w');
  fwrite($fh, $freq_output);
  fclose($fh);
  
  

function process_cond($line, $nc_sc)
{
	global $max_guard_size;
	global $nc_array;
	global $sc_array;

	$parsed_line = explode("\t", $line);
	$orig_size = intval($parsed_line[1]);
	$bound_size = intval($parsed_line[2]);


//	echo ($orig_size . "===>" . $bound_size. "\n");

	if($orig_size > $max_guard_size)
		$max_guard_size = $orig_size;

	if($nc_sc == "nc")
		process_nc($orig_size, $bound_size);

	if($nc_sc == "sc")
		process_sc($orig_size, $bound_size);
		
}

function process_nc($orig_size, $bound_size)
{
	global $max_guard_size;
	global $nc_array;

	if(array_key_exists($orig_size, $nc_array))
	{
	  array_push($nc_array[$orig_size], $bound_size);
	}

	else
	{
	  $new_entry = array(); 
	  array_push($new_entry, $bound_size);
	  $nc_array[$orig_size]=$new_entry; 	
	}

}

function process_sc($orig_size, $bound_size)
{
	global $max_guard_size;
	global $sc_array;

	if(array_key_exists($orig_size, $sc_array))
	{
	  array_push($sc_array[$orig_size], $bound_size);
	}

	else
	{
	  $new_entry = array(); 
	  array_push($new_entry, $bound_size);
	  $sc_array[$orig_size]=$new_entry; 	
	}

}

function compute_average($array)
{
	$size = count($array);
	assert ($size != 0);
	
	$sum = 0;
	
	for($i=0; $i<$size; $i++)
	{
	  $sum = $sum + $array[$i];
	}

	$avg = $sum / $size;
	return $avg;


}

// Compute standard deviation of an array of numbers
function compute_std_dev($array,  $mean_array)
{

  $std_dev_array = array();
  while(list($key, $val)=each($array))
  {
      $sum = 0;
      $size = count($array[$key]);
      while(list($key2, $val2)=each($val))
      {
    	$dif = $val2[$key2]-$mean_array[$key];
    	$dif_sq=$dif*$dif;
    	$sum = $sum + $dif_sq;
      }
	$std_dev_sq = $sum/$size;
	$std_dev=sqrt($std_dev_sq);
	$std_dev_array[$key]=$std_dev;
  }

  
  return $std_dev_array;
  

}

function create_output($avg_array, $std_dev_array)
{
	$output = "";
	while(list($key, $val)=each($avg_array))
	{
	   $std_dev = $std_dev_array[$key];
	   $std_dev_half =  $std_dev / 2;
	   $upper_bound =  $val+ $std_dev_half;
	   $lower_bound =  $val- $std_dev_half;
	   $output = $output . ("$key" . "\t" . "$val" . "\t" .
			 "$lower_bound" . "\t" . "$upper_bound" ."\n");
	}


	return $output;
	

}

function compute_frequency($array)
{
	$freq = array();
	while(list($key, $val)=each($array))
	{
	  $freq[$key] = count($val);
	}
	return $freq;
}

function get_freq_output($freq)
{
 	$output = "";
	while(list($key, $val)=each($freq))
	{
	  $output = $output . ("$key". "\t" . "$val" . "\n");	
	}
	return $output;
}


 
?>