package edu.rice.rubbos.client;

import java.net.URL;
import java.net.URLEncoder;

/**
 * This abstract class provides the needed URLs to access all features of RUBBoS.
 * Only the function returning script names must be defined in subclasses else
 * every URL is generated by this class.
 *
 * @author <a href="mailto:cecchet@rice.edu">Emmanuel Cecchet</a> and <a href="mailto:julie.marguerite@inrialpes.fr">Julie Marguerite</a>
 * @version 1.0
 */

public abstract class URLGenerator
{
  private static final String protocol = "http";
  private String webSiteName;
  private int    webSitePort;
  private String HTMLPath;
  private String scriptPath;


 /**
   * Returns the name of the Search script according to the implementation (PHP, EJB or Servlets).
   *
   * @return Search script name
   */
  public abstract String SearchScript();


  /**
   * Returns the name of the Browse Categories script according to the implementation (PHP, EJB or Servlets).
   *
   * @return Browse Categories script name
   */
  public abstract String BrowseCategoriesScript();

  /**
   * Returns the name of the Stories of the day script according to the implementation (PHP, EJB or Servlets).
   *
   * @return Stories of the day script name
   */
  public abstract String StoriesOfTheDayScript();

  /**
   * Returns the name of the Older stories script according to the implementation (PHP, EJB or Servlets).
   *
   * @return Older stories script name
   */
  public abstract String OlderStoriesScript();

  /**
   * Returns the name of the Submit story script according to the implementation (PHP, EJB or Servlets).
   *
   * @return Submit story script name
   */
  public abstract String SubmitStoryScript();

  /**
   * Returns the name of the Post Comment script according to the implementation (PHP, EJB or Servlets).
   *
   * @return Post Comment script name
   */
  public abstract String PostCommentScript();

  /**
   * Returns the name of the Register User script according to the implementation (PHP, EJB or Servlets).
   *
   * @return Register User script name
   */
  public abstract String RegisterUserScript();

  /**
   * Returns the name of the Browse stories By Category script according to the implementation (PHP, EJB or Servlets).
   *
   * @return Browse stories by category By Category script name
   */
  public abstract String BrowseStoriesByCategoryScript();

  /**
   * Returns the name of the Store Comment script according to the implementation (PHP, EJB or Servlets).
   *
   * @return Store Store comment script name
   */
  public abstract String StoreCommentScript();

  /**
   * Returns the name of the Store Story script according to the implementation (PHP, EJB or Servlets).
   *
   * @return Store Story script name
   */
  public abstract String StoreStoryScript();

  /**
   * Returns the name of the View Story script according to the implementation (PHP, EJB or Servlets).
   *
   * @return View Story script name
   */
  public abstract String ViewStoryScript();

  /**
   * Returns the name of the View Comment script according to the implementation (PHP, EJB or Servlets).
   *
   * @return View Comment script name
   */
  public abstract String ViewCommentScript();

  /**
   * Returns the name of the Moderate Comment script according to the implementation (PHP, EJB or Servlets).
   *
   * @return Moderate Comment script name
   */
  public abstract String ModerateCommentScript();

  /**
   * Returns the name of the Store Moderate Log script according to the implementation (PHP, EJB or Servlets).
   *
   * @return Store Moderate Log script name
   */
  public abstract String StoreModerateLogScript();

  /**
   * Returns the name of the Author Tasks script according to the implementation (PHP, EJB or Servlets).
   *
   * @return Author Tasks script name
   */
  public abstract String AuthorTasksScript();

  /**
   * Returns the name of the Review Stories script according to the implementation (PHP, EJB or Servlets).
   *
   * @return Review Stories script name
   */
  public abstract String ReviewStoriesScript();

  /**
   * Returns the name of the Accept Story script according to the implementation (PHP, EJB or Servlets).
   *
   * @return Accept Story script name
   */
  public abstract String AcceptStoryScript();

  /**
   * Returns the name of the Accept Story script according to the implementation (PHP, EJB or Servlets).
   *
   * @return Accept Story script name
   */
  public abstract String RejectStoryScript();


  /**
   * Set the name and port of the Web site running RUBiS as well as the
   * directories where the HTML and scripts reside.
   *
   * @param host Web site address
   * @param port HTTP server port
   * @param HTMLFilesPath path where HTML files reside
   * @param ScriptFilesPath path to the script files
   */
  public URLGenerator(String host, int port, String HTMLFilesPath, String ScriptFilesPath)
  {
    webSiteName = host;
    HTMLPath    = HTMLFilesPath;
    scriptPath  = ScriptFilesPath;
    webSitePort = port;
  }

  /** Set the web site name.
   * For example: 
   * <pre>
   * URLGenerator urlGen = new URLGenerator();
   * urlGen.setWebSiteName("www.testbed.cs.rice.edu");
   * </pre>
   *
   * @param host location
   */
  public void setWebSiteName(String host)
  {
    webSiteName = host;
  }   

  /** Set the location where the HTML files reside on the web site.
   * For example: 
   * <pre>
   * URLGenerator urlGen = new URLGenerator();
   * urlGen.setHTMLPath("/EJB_HTML");
   * </pre>
   *
   * @param p HTML files path
   */
  public void setHTMLPath(String p)
  {
    HTMLPath = p;
  }   


  /** Set the location where the script files reside on the web site.
   * For example: 
   * <pre>
   * URLGenerator urlGen = new URLGenerator();
   * urlGen.setScriptPath("/servlet");
   * </pre>
   *
   * @param p HTML files path
   */
  public void setScriptPath(String p)
  {
    scriptPath = p;
  }   


  /**
   * Set the value of http server port.
   *
   * @param p http server port
   */
  public void setWebSitePort(int p) 
  {
    webSitePort = p;
  }


  /**
   * Return the string representing a float number in a format understandable by the database.
   * This function needs to be fixed since it still does not work with large number.
   *
   * @param f the float value to convert
   * @return a string representing the float conforming to database representation.
   */
  protected String convertFloatToStringDatabaseFormat(float f)
  {
    String result = Float.toString(f);
    int E = result.indexOf('E');
    if (E != -1)
    /* We have something like 1.2345E6 but the database needs 1.2345E+6
       So, we need to add the + */
      result = result.substring(0,E+1)+"+"+result.substring(E+1);
    return result;
  }

  // ===========================================================
  // ==================== URL Generation =======================
  // ===========================================================


  /** URL to the page corresponding to the file.
   *
   * @param filename file name
   * @return the URL corresponding to the file
   */
  public URL genericHTMLFile(String filename)
  {
    try
    {
      URL url = new URL(protocol, webSiteName, webSitePort, filename);
      return url;
    }
    catch (java.net.MalformedURLException e)
    {
      System.out.println("Error while generating the URL corresponding to the file: "+e.getMessage());
      return null;
    }
  }

  // =====================================================
  // ==================== Home page ======================
  // =====================================================

  /** URL to the home page of the web site. 
   * Actually, it displays Stories of the Day.
   *
   * @return home page URL
   */
  public URL homePage()
  {
    try
    {
      URL url = new URL(protocol, webSiteName, webSitePort, scriptPath+"/"+StoriesOfTheDayScript());
      return url;
    }
    catch (java.net.MalformedURLException e)
    {
      System.out.println("Error while generating home page URL: "+e.getMessage());
      return null;
    }
  }


  // =====================================================
  // ==================== Register =======================
  // =====================================================

  /** URL to the register user page of the web site.
   *
   * @return register user page URL
   */
  public URL register()
  {
    try
    {
      URL url = new URL(protocol, webSiteName, webSitePort, HTMLPath+"/register.html");
      return url;
    }
    catch (java.net.MalformedURLException e)
    {
      System.out.println("Error while generating register page URL: "+e.getMessage());
      return null;
    }
  }

  /**
   * Register a new user in the database. You must provide all
   * information that are requested by the web page.
   *
   * @param firstname user's first name
   * @param lastname user's last name
   * @param nickname user's nick name (login name)
   * @param email user's email address
   * @param password user's password
   * @return URL to use to register a new user
   */
  public URL registerUser(String firstname, String lastname, String nickname, 
                         String email, String password)
  {
    try
    {
      firstname  = URLEncoder.encode(firstname);
      lastname   = URLEncoder.encode(lastname);
      nickname   = URLEncoder.encode(nickname);
      email      = URLEncoder.encode(email);
      password   = URLEncoder.encode(password);
      URL url = new URL(protocol, webSiteName, webSitePort, scriptPath+"/"+RegisterUserScript()+"?firstname="+firstname+"&lastname="+
      lastname+"&nickname="+nickname+"&email="+email+"&password="+password);
      return url;
    }
    catch (java.net.MalformedURLException e)
    {
      System.out.println("Error while generating register user page URL: "+e.getMessage());
      return null;
    }
  }


  // =====================================================
  // ==================== Browsing =======================
  // =====================================================

  /** URL to the browse page of the web site.
   *
   * @return browse page URL
   */
  public URL browse()
  {
    try
    {
      URL url = new URL(protocol, webSiteName, webSitePort, HTMLPath+"/browse.html");
      return url;
    }
    catch (java.net.MalformedURLException e)
    {
      System.out.println("Error while generating browse page URL: "+e.getMessage());
      return null;
    }
  }


  /** Access the Browse Categories page of RUBBoS that lists all
   * available categories. The user can then select a category
   * to view all items in that category.
   *
   * @return Browse categories script URL
   */
  public URL browseCategories()
  {
    try
    {
      URL url = new URL(protocol, webSiteName, webSitePort, scriptPath+"/"+BrowseCategoriesScript());
      return url;
    }
    catch (java.net.MalformedURLException e)
    {
      System.out.println("Error while generating Browse Categories script URL: "+e.getMessage());
      return null;
    }
  }

  /** Access the Stories of the day page of RUBBoS that lists
   * the 10 most recent stories. 
   *
   * @return  Stories of the day script URL
   */
  public URL StoriesOfTheDay()
  {
    try
    {
      URL url = new URL(protocol, webSiteName, webSitePort, scriptPath+"/"+StoriesOfTheDayScript());
      return url;
    }
    catch (java.net.MalformedURLException e)
    {
      System.out.println("Error while generating Stories of the day script URL: "+e.getMessage());
      return null;
    }
  }

  /** Access the Older Stories page of RUBBoS that lists
   * the stories of a specific day.
   *
   * @param day day to look for
   * @param month month to look for
   * @param year year to look for
   * @param page page to view (0=first page)
   * @param nbOfStories number of stories to display per page
   *
   * @return  Older Stories  script URL
   */
  public URL OlderStories(int day, int month, int year, int page, int nbOfStories)
  {
    try
    {
      URL url = new URL(protocol, webSiteName, webSitePort, scriptPath+"/"+OlderStoriesScript()+
                        "?day="+day+"&month="+month+"&year="+year+"&page="+page+"&nbOfStories="+nbOfStories);
      return url;
    }
    catch (java.net.MalformedURLException e)
    {
      System.out.println("Error while generating Older stories script URL: "+e.getMessage());
      return null;
    }
  }

  /**
   * URL to the 'browse all stories in a category' script. You must
   * provide both the category id and category name.
   *
   * @param categoryId category id
   * @param categoryName category name
   * @param page page to view (0=first page)
   * @param nbOfStories number of stories to display per page
   *
   * @return 'browse all stories in a category' script URL
   */
  public URL browseStoriesByCategory(int categoryId, String categoryName, int page, int nbOfStories)
  {
    try
    {
      categoryName = URLEncoder.encode(categoryName);
      URL url = new URL(protocol, webSiteName, webSitePort, scriptPath+"/"+BrowseStoriesByCategoryScript()+
                        "?category="+categoryId+"&categoryName="+categoryName+"&page="+page+"&nbOfStories="+nbOfStories);
      return url;
    }
    catch (java.net.MalformedURLException e)
    {
      System.out.println("Error while generating 'browse all stories in a category' script URL: "+e.getMessage());
      return null;
    }
  }

  /** URL to the 'View Story' script. You must provide the story id.
   *
   * @param storyId story identifier
   *
   * @return 'View Story' script URL
   */
  public URL viewStory(int storyId)
  {
    try
    {
      URL url = new URL(protocol, webSiteName, webSitePort, scriptPath+"/"+ViewStoryScript()+"?storyId="+storyId);
      return url;
    }
    catch (java.net.MalformedURLException e)
    {
      System.out.println("Error while generating 'View Story' script URL: "+e.getMessage());
      return null;
    }
  }


 /**
   * URL to the 'Search' script.
   *
   * @param searchType Type of the research : search on 0=stories, 1=comments, 2=users
   * @param keyword keyword for the search
   * @param page page to view (0=first page)
   * @param nbOfStories number of stories or comments to display per page
   *
   * @return 'Search' script URL
   */
  public URL search(String keyword, String searchType, int page, int nbOfStories)
  {
    try
    {
      URL url;
      if (keyword == null)
        url = new URL(protocol, webSiteName, webSitePort, scriptPath+"/"+SearchScript());
      else
        url = new URL(protocol, webSiteName, webSitePort, scriptPath+"/"+SearchScript()+
                      "?type="+URLEncoder.encode(searchType)+"&search="+URLEncoder.encode(keyword)+"&page="+page+"&nbOfStories="+nbOfStories);
      return url;
    }
    catch (java.net.MalformedURLException e)
    {
      System.out.println("Error while generating 'Search' script URL: "+e.getMessage());
      return null;
    }
  }

  // =====================================================
  // ==================== Comments =======================
  // =====================================================

  /** URL to the 'Post Comment on a story or another comment' script.
   * This is the page the user can access when it has been successfully authenticated.
   *
   * @param storyId story identifier
   * @param parent parent comment identifier
   * @param comment_table the comment_table to use (comments or old_comments)
   *
   * @return 'Post Comment' script URL
   */
  public URL postComment(int storyId, int parent, String comment_table)
  {
    try
    {
      comment_table = URLEncoder.encode(comment_table);
      URL url = new URL(protocol, webSiteName, webSitePort, scriptPath+"/"+PostCommentScript()+"?storyId="+storyId+"&parent="+parent+"&comment_table="+comment_table);
      return url;
    }
    catch (java.net.MalformedURLException e)
    {
      System.out.println("Error while generating 'Post Comment' script URL: "+e.getMessage());
      return null;
    }
  }   


  /** URL to the 'StoreComment' script. This action really stores a new comment in the database.
   *
   * @param name user's nickname
   * @param pwd user's password
   * @param storyId story identifier
   * @param parent parent comment identifier
   * @param subject the subject of the comment
   * @param body the comment text itself
   * @param comment_table the comment_table to use (comments or old_comments)
   *
   * @return 'Store Comment' script URL
   */
  public URL storeComment(String name, String pwd, int storyId, int parent, String subject, String body, String comment_table)
  {
    try
    {
      name = URLEncoder.encode(name);
      pwd = URLEncoder.encode(pwd);
      subject = URLEncoder.encode(subject);
      body = URLEncoder.encode(body);
      URL url = new URL(protocol, webSiteName, webSitePort, scriptPath+"/"+StoreCommentScript()+"?comment_table="+comment_table
                        +"&nickname="+name+"&password="+pwd+"&storyId="+storyId+"&parent="+parent+"&subject="+subject+"&body="+body);
      return url;
    }
    catch (java.net.MalformedURLException e)
    {
      System.out.println("Error while generating StoreComment script URL: "+e.getMessage());
      return null;
    }
  }   


  /**
   * URL to the 'View Comment' script. You must provide the comment id.
   *
   * @param commentId comment identifier
   * @param filter filter value
   * @param display display value
   * @param storyId story identifier
   * @param comment_table the comment_table to use (comments or old_comments)
   *
   * @return 'View Comment' script URL
   */
  public URL viewComment(int commentId, int filter, int display, int storyId, String comment_table)
  {
    try
    {
      URL url = new URL(protocol, webSiteName, webSitePort, scriptPath+"/"+ViewCommentScript()+"?commentId="+commentId+"&filter="+filter+
                        "&display="+display+"&storyId="+storyId+"&comment_table="+comment_table);
      return url;
    }
    catch (java.net.MalformedURLException e)
    {
      System.out.println("Error while generating 'View comment' script URL: "+e.getMessage());
      return null;
    }
  }


  /**
   * URL to the 'Moderate Comment' script. You must provide the comment id.
   *
   * @param commentId comment identifier
   * @param comment_table the comment_table to use (comments or old_comments)
   *
   * @return 'Moderate Comment' script URL
   */
  public URL moderateComment(int commentId, String comment_table)
  {
    try
    {
      URL url = new URL(protocol, webSiteName, webSitePort, scriptPath+"/"+ModerateCommentScript()+
                        "?commentId="+commentId+"&comment_table="+comment_table);
      return url;
    }
    catch (java.net.MalformedURLException e)
    {
      System.out.println("Error while generating 'View comment' script URL: "+e.getMessage());
      return null;
    }
  }


  /** URL to the 'Store Moderate Log' script. This action really stores a new comment in the database.
   *
   * @param name user's nickname
   * @param pwd user's password
   * @param commentId comment identifier
   * @param rating comment's rating
   * @param comment_table the comment_table to use (comments or old_comments)
   *
   * @return 'Store Moderate Log' script URL
   */
  public URL storeModerateLog(String name, String pwd, int commentId, int rating, String comment_table)
  {
    try
    {
      name = URLEncoder.encode(name);
      pwd = URLEncoder.encode(pwd);
      URL url = new URL(protocol, webSiteName, webSitePort, scriptPath+"/"+StoreModerateLogScript()+"?comment_table="+comment_table
                        +"&nickname="+name+"&password="+pwd+"&commentId="+commentId+"&rating="+rating);
      return url;
    }
    catch (java.net.MalformedURLException e)
    {
      System.out.println("Error while generating StoreComment script URL: "+e.getMessage());
      return null;
    }
  }   


  // ====================================================
  // ==================== Submit story ==================
  // ====================================================

 /** URL to the Submit Story script.
   *
   * @return 'Submit Story' script URL
   */
  public URL submitStory()
  {
    try
    {
      URL url = new URL(protocol, webSiteName, webSitePort, scriptPath+"/"+SubmitStoryScript());
      return url;
    }
    catch (java.net.MalformedURLException e)
    {
      System.out.println("Error while generating 'Submit Story' script URL: "+e.getMessage());
      return null;
    }
  }   
 

  /** URL to the 'Store story' script. This action really stores a new story in the database.
   *
   * @param name user's nickname
   * @param pwd user's password
   * @param title story title
   * @param body the story itself
   * @param categoryId category identifier
   *
   * @return 'Store story' script URL
   */
  public URL storeStory(String name, String pwd, String title, String body, int categoryId)
  {
    try
    {
      name = URLEncoder.encode(name);
      pwd  = URLEncoder.encode(pwd);
      title = URLEncoder.encode(title);
      body = URLEncoder.encode(body);
      URL url = new URL(protocol, webSiteName, webSitePort, scriptPath+"/"+StoreStoryScript()+"?nickname="+name+"&password="+pwd+"&category="+categoryId+"&title="+title+"&body="+body);
      return url;
    }
    catch (java.net.MalformedURLException e)
    {
      System.out.println("Error while generating 'Store Story' script URL: "+e.getMessage());
      return null;
    }
  }


  // ===============================================
  // ==================== Authors ==================
  // ===============================================

  /** URL to the Submit Story on a story or another comment' script.
   *
   * @return 'Author login' URL
   */
  public URL authorLogin()
  {
    try
    {
      URL url = new URL(protocol, webSiteName, webSitePort, HTMLPath+"/author.html");
      return url;
    }
    catch (java.net.MalformedURLException e)
    {
      System.out.println("Error while generating 'Author login' URL: "+e.getMessage());
      return null;
    }
  }   
 

  /** URL to the 'Author tasks' script.
   *
   * @param name user's nickname
   * @param pwd user's password
   *
   * @return 'Author tasks' script URL
   */
  public URL authorTasks(String name, String pwd)
  {
    try
    {
      name = URLEncoder.encode(name);
      pwd  = URLEncoder.encode(pwd);
      URL url = new URL(protocol, webSiteName, webSitePort, scriptPath+"/"+AuthorTasksScript()+"?nickname="+name+"&password="+pwd);
      return url;
    }
    catch (java.net.MalformedURLException e)
    {
      System.out.println("Error while generating 'Author tasks' script URL: "+e.getMessage());
      return null;
    }
  }

  /** URL to the 'Review Stories' script.
   *
   * @return 'Review Stories' script URL
   */
  public URL reviewStories()
  {
    try
    {
      URL url = new URL(protocol, webSiteName, webSitePort, scriptPath+"/"+ReviewStoriesScript());
      return url;
    }
    catch (java.net.MalformedURLException e)
    {
      System.out.println("Error while generating 'Review Stories' script URL: "+e.getMessage());
      return null;
    }
  }

  /** URL to the 'Accept Story' script. You must provide the story id.
   *
   * @param storyId story identifier
   *
   * @return 'Accept Story' script URL
   */
  public URL acceptStory(int storyId)
  {
    try
    {
      URL url = new URL(protocol, webSiteName, webSitePort, scriptPath+"/"+AcceptStoryScript()+"?storyId="+storyId);
      return url;
    }
    catch (java.net.MalformedURLException e)
    {
      System.out.println("Error while generating 'Accept Story' script URL: "+e.getMessage());
      return null;
    }
  }


  /** URL to the 'Reject Story' script. You must provide the story id.
   *
   * @param storyId story identifier
   *
   * @return 'Reject Story' script URL
   */
  public URL rejectStory(int storyId)
  {
    try
    {
      URL url = new URL(protocol, webSiteName, webSitePort, scriptPath+"/"+RejectStoryScript()+"?storyId="+storyId);
      return url;
    }
    catch (java.net.MalformedURLException e)
    {
      System.out.println("Error while generating 'Reject Story' script URL: "+e.getMessage());
      return null;
    }
  }

}
